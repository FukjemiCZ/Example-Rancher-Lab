---
- name: Install Rancher on VPS
  hosts: rancher
  become: true
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
    docker_version: "26.1.3"
    rancher_version: "latest"
    backup_dir: "/var/lib/rancher_backup"
    rancher_data_dir: "/var/lib/rancher"
    ssh_key_path: "/tmp/github_actions_key"
    ansible_become_password: "{{ lookup('env', 'VPS_USER_PASSWORD') }}"
    ansible_ssh_pass: "{{ lookup('env', 'VPS_USER_PASSWORD') }}"
    ansible_python_interpreter: /usr/bin/python3
    rancher_domain: "rancher.example.cz"
  tasks:
    - name: Ensure Python 'requests' library is installed
      apt:
        name: python3-requests
        state: present
      tags: install_requests

    - name: Disable strict host key checking
      lineinfile:
        path: /etc/ssh/ssh_config
        regexp: '^#?StrictHostKeyChecking'
        line: 'StrictHostKeyChecking no'
        state: present

    - name: Check if Docker is installed
      command: docker --version
      register: docker_installed
      ignore_errors: yes

    - name: Install Docker if not installed
      shell: curl https://releases.rancher.com/install-docker/{{ docker_version }}.sh | sh
      when: docker_installed.failed

    - name: Start Rancher container
      docker_container:
        name: rancher
        image: rancher/rancher:{{ rancher_version }}
        state: started
        restart_policy: unless-stopped
        ports:
          - "80:80"
          - "443:443"
        privileged: yes
        command: "--acme-domain {{ rancher_domain }}"

    - name: Allow SSH through UFW
      ufw:
        rule: allow
        port: '22'

    - name: Allow HTTP through UFW
      ufw:
        rule: allow
        port: '80'

    - name: Allow HTTPS through UFW
      ufw:
        rule: allow
        port: '443'

    - name: Enable UFW
      ufw:
        state: enabled

    - name: Check UFW status
      command: ufw status
      register: ufw_status

    - name: Print UFW status
      debug:
        var: ufw_status.stdout

    - name: Create backup directory
      file:
        path: "{{ backup_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Create backup script
      copy:
        content: |
          #!/bin/bash
          tar czf {{ backup_dir }}/rancher_backup_$(date +\%F_\%T).tar.gz -C {{ rancher_data_dir }} .
        dest: /usr/local/bin/backup_rancher.sh
        mode: '0755'

    - name: Add cron job for backup
      cron:
        name: "Daily Rancher backup"
        minute: "0"
        hour: "2"
        user: root
        job: "/usr/local/bin/backup_rancher.sh"
